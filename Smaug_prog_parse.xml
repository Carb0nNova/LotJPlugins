<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<!-- The base of this script was written by Zeno of BabbleMUD -->

<muclient>
<plugin
   name="Smaug_prog_parse"
   author="Johnson"
   id="94543e4d538c295fb099d786"
   language="Lua"
   purpose="Smaug Mud Prog Syntax Highlighting and Indenting"
   date_written="2013-03-15 13:20:24"
   requires="4.35"
   version="1.0"
   >

<description trim="y">
USAGE:

   progcomments       : show chats window
   progindents        : hide chats window
   progtabsize #      : set the tab size for indents
  
This plugin alters how existing Smaug Mud Progs are displayed
by highlighting keywords, displaying proper indenting, and 
adding lua-style else and endif line comments to aid in following
program logic flow.
   
</description>
</plugin>
<!--  Triggers -->

<triggers>
  
  <trigger
   custom_colour="17"
   enabled="y"
   match="^[\s]*break$"
   regexp="y"
   script="indentLine"
   omit_from_output="y"
   sequence="100"
   other_text_colour="firebrick"
  >
  </trigger>

  <trigger
   custom_colour="17"
   enabled="y"
   match="^[\s]*mp[\S]*[\s]*"
   regexp="y"
   script="indentLine"
   omit_from_output="y"
   sequence="100"
   other_text_colour="violet"
  >
  </trigger>
  
  <trigger
   name="matchplain"
   enabled="n"
   match="^[\s]*[\S]*[\s]*"
   regexp="y"
   script="indentLine"
   omit_from_output="y"
   sequence="101"
  >
  </trigger>
  
  <trigger
   custom_colour="17"
   enabled="y"
   match="^(\d+)?&gt;(.*?)_prog (.*?)$"
   regexp="y"
   send_to="12"
   sequence="100"
   other_text_colour="coral"
  >
  <send>inprog = true
  EnableTrigger("matchplain", true)
</send>
  </trigger>

  <trigger
   custom_colour="17"
   enabled="y"
   match="^[\s]*if (.*)$"
   regexp="y"
   script="indentIfLine"
   omit_from_output="y"
   sequence="100"
   other_text_colour="deepskyblue"
  >
  </trigger>

  <trigger
   enabled="y"
   match="^[\s]*endif$"
   omit_from_output="y"
   regexp="y"
   script="SendEndifNote"
   sequence="100"
  >
  </trigger>

  <trigger
   enabled="y"
   match="^\s*$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if inprog then
 ifchecks = 0
 inprog = false
 EnableTrigger("matchplain", false)
end</send>
  </trigger>

  <trigger
   enabled="y"
   match="^[\s]*else$"
   omit_from_output="y"
   regexp="y"
   script="SendElseNote"
   send_to="12"
   sequence="100"
  >
  </trigger>

</triggers>

<aliases>

<alias name="togglecomments" match="progcomments" ignore_case="y" enabled="y" send_to="12" sequence="100">
	<send>if comments then
	comments = false
	ColourNote("red","","Mud Prog Comments are disabled.")
	else
	comments = true
	ColourNote("lime","","Mud Prog Comments are enabled.")
	end</send>
	</alias>
<alias name="toggleindents" match="progindents" ignore_case="y" enabled="y" send_to="12" sequence="100">
	<send>if indents then
	indents = false
	ColourNote("red","","Mud Prog Indenting is disabled.")
	else
	indents = true
	ColourNote("lime","","Mud Prog Indenting is enabled.")
	end</send>
	</alias>
<alias name="resizetabs" match="progtabsize *" script="setTabSize" ignore_case="y" enabled="y" send_to="12" sequence="100" />
</aliases>


<!--  Script  -->

<script>
<![CDATA[
comments = true
indents = true
tabsize = tonumber(GetVariable("tabsize")) or 2
inprog = false
ifchecks = 0
ifchecklist = {}

function setTabSize(name, line, args)
  tabsize = tonumber(args[1])
  SetVariable("tabsize", tabsize)
  ColourNote("yellow", "black", "Prog Tab Size set to: "..tabsize)
  OnPluginSaveState()
end

function SendElseNote (name, line, args)
  ColourTell("deepskyblue", "black", (indents and addSpaces(ifchecks-1, args[0]) or args[0]))
  if comments and (ifchecks > 0) then
  	ColourNote("green", "black", " -- if "..ifchecklist[ifchecks])
  else
  	Note("")
  end
end -- function

function SendEndifNote (name, line, args)
  ColourTell("deepskyblue", "black", (indents and addSpaces(ifchecks-1, args[0]) or args[0]))
  if comments and (ifchecks > 0) then
  	ColourNote("green", "black", " -- if "..ifchecklist[ifchecks])
  else
  	Note("")
  end
  if inprog then
    ifchecks = ifchecks - 1
  end
end -- function

function indentIfLine(name, line, args, styles)
  for k, v in pairs(styles) do
    ColourTell (RGBColourToName(v.textcolour), RGBColourToName(v.backcolour), ((k == 1 and indents) and addSpaces(ifchecks, v.text) or v.text))
  end
  Note("")
  if inprog then
    ifchecks = ifchecks + 1
    ifchecklist[ifchecks] = args[1]
  end
end

function indentLine(name, line, args, styles)
  for k, v in pairs(styles) do
    ColourTell (RGBColourToName(v.textcolour), RGBColourToName(v.backcolour), ((k == 1 and indents) and addSpaces(ifchecks, v.text) or v.text))
  end
  Note("")
end

function addSpaces(num, str)
  outstr = trimLeading(str)
  return string.format("%"..(num*tabsize)+string.len(outstr).."s", outstr)
end

function trimLeading(str)
  return (string.gsub(str, "^(%s*)", ""))
end

function OnPluginInstall()
  tabsize = tonumber(GetVariable("tabsize")) or 2
end

function OnPluginSaveState()
  SetVariable("tabsize", tabsize)
end

]]>
</script>


</muclient>