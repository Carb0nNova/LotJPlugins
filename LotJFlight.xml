<?xml version="1.0" encoding="iso-8859-1" ?> 
<!DOCTYPE muclient> 
<!--  Saved on Wednesday, July 25, 2012, 7:14 PM   -->  
<muclient>
<plugin name="LotJFlight" author="@Johnson" id="680bf1a4e5e600854747c379" language="Lua" purpose="Flight Made Easy" save_state="y" requires="4.40" version="1.47">
<description trim="y">
<![CDATA[ 
'FlyHelp'      - To see the list of commands associated with this plugin.
ChangeLog - 
v1.45 -
	Added flyclear alias to reset all variables before a new flight.
v1.44 -
	Correctly prompts for exit directions and landing preference when using flyfinish.
	Added flystatus alias to display current flight information.
v1.42 -
	Fixed auto landing mechanism.
  ]]> 
  </description>
  </plugin>
<!--   Get our standard constants   --> 
	<include name="constants.lua" /> 
<!--   Triggers    --> 
<triggers>
	<trigger name="LaunchComp" match="^Launch complete\.$" script="calcPlanet" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="CalcDone" match="^\[Status\]\: Hyperspace Calculations have been completed\.$" script="calcDone" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="HyperComp" match="^Hyperjump complete\.$" script="coursePlanet" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="OrbitObtained" match="^You begin orbitting (.*)\.$" script="doLand" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="LandGrabStart" match="^Possible choices for (.*)\:$" script="startLandGrab" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="MatchLine" match="^(.*)$" script="landGrab" group="landGrab" enabled="n" regexp="y" keep_evaluating="y" omit_from_log="n" omit_from_output="n" sequence="100" />
	<trigger name="LandGrabEnd" match="^$" script="endLandGrab" group="landGrab" enabled="n" regexp="y" sequence="100" />
	<trigger name="LandStarted" match="^You begin to land on (.*)\.$" script="landing" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="LandComp" match="^Landing sequence complete\.$" script="endFlight" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="Proximity" match="^You are too close to (.*) to make the jump to lightspeed\!$" script="waitHyper" group="Flight" enabled="n" regexp="y" sequence="100" />
	<trigger name="landsitelocked" match="^Restricted Landing pad\. Limited to clans members and ships only\.$" script="landNext" group="Flight" enabled="n" regexp="y" sequence="100" />
	
	<!-- triggers relating to space capturing -->
	<trigger name="StoreSpaceCoordinate" match="^(.*) (\-?\d+) (\-?\d+) (\-?\d+)(.*)?$" script="spaceCapStore" omit_from_output="y" keep_evaluating="y" group="SpaceCap" enabled="n" regexp="y" sequence="100" />
	<trigger name="CapStop" match="^Your Coordinates\: (.*)$" script="spaceCapStop" group="SpaceCap" enabled="n" regexp="y" sequence="100" />

</triggers>

<aliases>
	<alias name="Flytoarg" match="flyto *" script="beginFlight" enabled="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="Flyfinish" match="^flyfinish (.*)$" script="finishFlight" regexp="y" enabled="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="Flystatus" match="flystatus" script="flightStatus" enabled="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="Flyauto" match="^flyauto( +(.*))?$" script="flyAuto" enabled="y" regexp="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="Flyclear" match="flyclear" script="flyClear" enabled="y" regexp="n" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="FlyHelp" match="^flyhelp$" script="flightHelp" enabled="y" regexp="y" group="FlightCmd" ignore_case="y" sequence="100" />
	
	<!-- aliases relating to space coord capturing -->
	<alias name="CoordCapStart" match="rad" script="spaceCapStart" enabled="y" group="FlightCmd" ignore_case="y" sequence="100" />
	<alias name="CoordCalc" match="lcalc *" script="spaceCapCalc" enabled="y" group="FlightCmd" ignore_case="y" sequence="100" />
</aliases>
<!--   Script    --> 
<script>
<![CDATA[
shipName = ""
hatchCode = -1
shipEnterDirs = ""
shipLeaveDirs = ""
planetName = ""
lastPlanet = ""
autoFly = false
landingSites = {}
landingSiteNum = 0
landgrabbing = false
landPreference = -1

local spaceCoords = {}


function spaceCapStart()
	EnableTriggerGroup("SpaceCap", true)
	spaceCoords = {}
	Send("radar")
	Note("capping coords")
end
function spaceCapStop()
	EnableTriggerGroup("SpaceCap", false)
	Note("coords capped: "..#spaceCoords)
	--for i, v in ipairs(spaceCoords) do
	--	Note(i..") "..v.name)
	--end
end

function spaceCapStore(name, line, args)
	--for i=1,#args,1 do
	--	Note(i..") "..args[i])
	--end
	
	local body = {
		name=Trim(args[1]),
		x=tonumber(args[2]),
		y=tonumber(args[3]),
		z=tonumber(args[4])
	}
	if (body.name ~= "Your Coordinates:") then
		spaceCoords[#spaceCoords + 1] = body
		ColourNote("yellow", "", #spaceCoords..") "..body.name.." "..body.x.." "..body.y.." "..body.z)
	else
		ColourNote("yellow", "", body.name.." "..body.x.." "..body.y.." "..body.z)
	end

end
function spaceCapCalc(name, line, args)
	local found = nil
	for i, v in ipairs(spaceCoords) do
		if ((tonumber(args[1]) == i) or string.find(v.name, tostring(args[1]), 0)) then
			found = v
			--Note("found "..found.name)
		end
	end
	if not found then
		Note("Invalid argument given to spaceCapCalc: ".. args[1])
	else
		Note("Entering coordinates for "..found.name)
		Send("calc local "..found.x.." "..found.y.." "..found.z)
	end
end
function flyClear()
	shipName = ""
	hatchCode = -1
	shipEnterDirs = ""
	shipLeaveDirs = ""
	planetName = ""
	lastPlanet = ""
	autoFly = false
	landingSites = {}
	landingSiteNum = 0
	landgrabbing = false
	landPreference = -1
	Note("Fly variables cleared.")
	toggleFlyOff()
end

function endFlight()
	Execute(shipLeaveDirs)
	Send("openhatch")
	Send("leaveship")
	Send("refuel " .. shipName .. " full")
	Send("ships sale")
	landingSites = {}
	lastPlanet = planetName
	toggleFlyOff()
end

function waitHyper()
	DoAfter(10, "hyper")
end

function landing()
	Send("shields on")
	Send("autopilot on")
end	

function endLandGrab()
	if (landgrabbing == false) then
		landgrabbing = true
		Note("Grabbing landing sites...")
		landingSiteNum = 0
	else
		landgrabbing = false
		EnableTriggerGroup("landGrab", false)
		--Note("Land grab finished.")
		landingSiteNum = 0
		if (tonumber(landPreference) > 0) then
			landArg(landPreference)
		else
			landNext()
		end
	end
end

function landNext()
	landingSiteNum = landingSiteNum + 1
	landArg(landingSiteNum)
end

function landArg(siteNum)
	if (siteNum > #landingSites) then
		Note("Error in auto landing sequence, aborting...")
		toggleFlyOff()
		return
	end
	Send("land '" .. planetName .. "' " .. landingSites[siteNum])
end

function landGrab(name, list, args)
	landingSites[#landingSites + 1] = Trim(args[1])
end

function startLandGrab(name, list, args)
	EnableTriggerGroup("landGrab", true)
end

function doLand()
	Send("land '" .. planetName .. "'")
end


function coursePlanet()
	Send("speed 100")
	Send("course '" .. planetName .. "'")
end

function calcDone()
	Send("hyper")
end

function calcPlanet(name, list, args)
	if (planetName == "") then
		planetName = utils.inputbox("Planet to fly to?", "Planet", "planet", "Courier", 9)
	end
	Execute("calc " .. planetName)
end		

function flightStatus(name, list, args)
	Note("Flight status: " .. tostring(autoFly))
	Note("  Flying '" .. shipName .. "' (" .. hatchCode .. ")")
	if (autoFly == true) then
		if (lastPlanet ~= "") then
			Note("  Flying from: " .. lastPlanet)
		end
		Note("  Destination planet: " .. planetName)
	end
end

function finishFlight(name, list, args)
	if (args[1] ~= "") then
		planetName = Trim(args[1])
		Note("Planet name: '" .. planetName .. "'")
	end
	toggleFlyOn()
	if (shipName == "") then
		shipName = utils.inputbox("What ship are you in?", "Ship name", "", "Courier", 9)
	end
	if (shipLeaveDirs == "") then
		shipLeaveDirs = utils.inputbox("Dirs to leave ship?", "Exit", "", "Courier", 9)
	end
	if (landPreference == -1) then
		landPreference = tonumber(utils.inputbox("Preferred landing site at destination planet? (Numbered from top-down, 0 for automatic landing)", "Landing site", "0", "Courier", 9))
	end
end

function beginFlight(name, list, args)
	if (args[1] ~= "") then
		planetName = Trim(args[1])
	else
		planetName = utils.inputbox("Enter planet name to fly to:", "Destination", "Planet", "Courier", 9)
	end
	enterShip()
	toCockpit()
	Send("pilot")
	Send("autopilot off")
	Send("launch confirm")
	Send("shields on")
	Note("Flying to: '" .. planetName .. "'")
	toggleFlyOn()
	if (landPreference == -1) then
		landPreference = tonumber(utils.inputbox("Preferred landing site at destination planet? (Numbered from top-down, 0 for automatic landing)", "Landing site", "0", "Courier", 9))
	end
end

function enterShip(name, list, args)
	if (shipName == "") then
		shipName = utils.inputbox("Ship to be flown?", "Shipname", "shipname", "Courier", 9)
	end
	if (hatchCode == -1) then
		hatchCode = tonumber(utils.inputbox("Hatch code? (0 for none)", "Hatchcode", "0", "Courier", 9))
	end
	if (hatchCode < 1) then
		Send("openhatch " .. shipName)
	else
		Send("openhatch " .. shipName .. " " .. hatchCode)
	end
	Send("enter " .. shipName)
	Send("closehatch")
end

function toCockpit(name, list, args)
	if (shipEnterDirs == "") then
		shipEnterDirs = utils.inputbox("Dirs to cockpit?", "Cockpit", "", "Courier", 9)
	end
	Execute(shipEnterDirs)
	if (shipLeaveDirs == "") then
		shipLeaveDirs = utils.inputbox("Dirs to leave ship?", "Exit", "", "Courier", 9)
	end
end

function toggleFlyOn()
	autoFly = true
	EnableTriggerGroup("Flight", true)
	Note("Auto Flight activated.")
end

function toggleFlyOff()
	autoFly = false
	EnableTriggerGroup("Flight", false)
	Note("Auto Flight deactivated.")
end

function flyAuto(name, line, args)
   if (args[1] == "on") then
      toggleFlyOn()
   else
      if (args[1] == "off") then
         toggleFlyOff()
      else
         if(autoFly == true) then
            toggleFlyOff()
         else
            toggleFlyOn()
         end
      end
   end
end

function flightHelp()
	Note("Automatic flight commands:")
	Note("------------------------------")
	Note("Flyto <planet>      - Begin a flight to given planet, while standing in front of ship")
	--Note("Flyto prompt        - Begin a new flight, prompting for parameters")
	Note("Flyfinish <planet>  - Finish a flight already in progress to given planet")
	Note("Flystatus           - Display current status of flight")
	Note("Flyauto on/off      - Enable or disable automatic flight")
	Note("Flyclear            - Clears all current fly variables")
	Note("FlyHelp             - Display this help menu")
	Note("\n")
end

require "checkplugin"
function OnPluginListChanged()
	do_plugin_check_now ("b2c06b3dcc775c0ede861316", "LotJCalc") -- check we have LotJCalc Plugin
end


  ]]> 
  </script>
 <!--   Plugin help    -->
  <aliases>
  <alias script="OnHelp" match="LotJFlight:help" enabled="y" /> 
  </aliases>
 <script>
 <![CDATA[ function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

  ]]> 
  </script>
  </muclient>
  
  